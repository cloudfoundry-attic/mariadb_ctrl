// This file was generated by counterfeiter
package seederfakes

import (
	"sync"

	"github.com/cloudfoundry/mariadb_ctrl/mariadb_helper/seeder"
	_ "github.com/go-sql-driver/mysql"
)

type FakeSeeder struct {
	CreateDBIfNeededStub        func() error
	createDBIfNeededMutex       sync.RWMutex
	createDBIfNeededArgsForCall []struct{}
	createDBIfNeededReturns     struct {
		result1 error
	}
	IsExistingUserStub        func() (bool, error)
	isExistingUserMutex       sync.RWMutex
	isExistingUserArgsForCall []struct{}
	isExistingUserReturns     struct {
		result1 bool
		result2 error
	}
	CreateUserStub        func() error
	createUserMutex       sync.RWMutex
	createUserArgsForCall []struct{}
	createUserReturns     struct {
		result1 error
	}
	GrantUserPrivilegesStub        func() error
	grantUserPrivilegesMutex       sync.RWMutex
	grantUserPrivilegesArgsForCall []struct{}
	grantUserPrivilegesReturns     struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSeeder) CreateDBIfNeeded() error {
	fake.createDBIfNeededMutex.Lock()
	fake.createDBIfNeededArgsForCall = append(fake.createDBIfNeededArgsForCall, struct{}{})
	fake.recordInvocation("CreateDBIfNeeded", []interface{}{})
	fake.createDBIfNeededMutex.Unlock()
	if fake.CreateDBIfNeededStub != nil {
		return fake.CreateDBIfNeededStub()
	}
	return fake.createDBIfNeededReturns.result1
}

func (fake *FakeSeeder) CreateDBIfNeededCallCount() int {
	fake.createDBIfNeededMutex.RLock()
	defer fake.createDBIfNeededMutex.RUnlock()
	return len(fake.createDBIfNeededArgsForCall)
}

func (fake *FakeSeeder) CreateDBIfNeededReturns(result1 error) {
	fake.CreateDBIfNeededStub = nil
	fake.createDBIfNeededReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSeeder) IsExistingUser() (bool, error) {
	fake.isExistingUserMutex.Lock()
	fake.isExistingUserArgsForCall = append(fake.isExistingUserArgsForCall, struct{}{})
	fake.recordInvocation("IsExistingUser", []interface{}{})
	fake.isExistingUserMutex.Unlock()
	if fake.IsExistingUserStub != nil {
		return fake.IsExistingUserStub()
	}
	return fake.isExistingUserReturns.result1, fake.isExistingUserReturns.result2
}

func (fake *FakeSeeder) IsExistingUserCallCount() int {
	fake.isExistingUserMutex.RLock()
	defer fake.isExistingUserMutex.RUnlock()
	return len(fake.isExistingUserArgsForCall)
}

func (fake *FakeSeeder) IsExistingUserReturns(result1 bool, result2 error) {
	fake.IsExistingUserStub = nil
	fake.isExistingUserReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeSeeder) CreateUser() error {
	fake.createUserMutex.Lock()
	fake.createUserArgsForCall = append(fake.createUserArgsForCall, struct{}{})
	fake.recordInvocation("CreateUser", []interface{}{})
	fake.createUserMutex.Unlock()
	if fake.CreateUserStub != nil {
		return fake.CreateUserStub()
	}
	return fake.createUserReturns.result1
}

func (fake *FakeSeeder) CreateUserCallCount() int {
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	return len(fake.createUserArgsForCall)
}

func (fake *FakeSeeder) CreateUserReturns(result1 error) {
	fake.CreateUserStub = nil
	fake.createUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSeeder) GrantUserPrivileges() error {
	fake.grantUserPrivilegesMutex.Lock()
	fake.grantUserPrivilegesArgsForCall = append(fake.grantUserPrivilegesArgsForCall, struct{}{})
	fake.recordInvocation("GrantUserPrivileges", []interface{}{})
	fake.grantUserPrivilegesMutex.Unlock()
	if fake.GrantUserPrivilegesStub != nil {
		return fake.GrantUserPrivilegesStub()
	}
	return fake.grantUserPrivilegesReturns.result1
}

func (fake *FakeSeeder) GrantUserPrivilegesCallCount() int {
	fake.grantUserPrivilegesMutex.RLock()
	defer fake.grantUserPrivilegesMutex.RUnlock()
	return len(fake.grantUserPrivilegesArgsForCall)
}

func (fake *FakeSeeder) GrantUserPrivilegesReturns(result1 error) {
	fake.GrantUserPrivilegesStub = nil
	fake.grantUserPrivilegesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSeeder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createDBIfNeededMutex.RLock()
	defer fake.createDBIfNeededMutex.RUnlock()
	fake.isExistingUserMutex.RLock()
	defer fake.isExistingUserMutex.RUnlock()
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	fake.grantUserPrivilegesMutex.RLock()
	defer fake.grantUserPrivilegesMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSeeder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ seeder.Seeder = new(FakeSeeder)
